/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.netology.pyas;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;

import ru.netology.pyas.nasa.NasaResponse;

public class Main {

    private static final String KEY_VALUE = "CrOwLscJZM3uKAb7yjdmiFIO34OLj92TqJSiRcoq";
    private static final String KEY_PARAM = "api_key";
    private static final String URL = "https://api.nasa.gov/planetary/apod";

    public static void main(String[] args) {
        ObjectMapper mapper = new ObjectMapper();

        try (CloseableHttpClient client = makeClient()) {
            HttpGet request = makeGetRequest(URL, new HashMap<String, String>(){{ put(KEY_PARAM, KEY_VALUE);}});
            if (request == null) {
                System.err.println("Wrong url: " + URL);
                return;
            }

            String imageUrl;
            try (CloseableHttpResponse response = client.execute(request)) {
                NasaResponse resp = mapper.readValue(response.getEntity().getContent(), new TypeReference<NasaResponse>(){});
                imageUrl = resp.getUrl();
            }

            request = makeGetRequest(imageUrl);
            if (request == null) {
                System.err.println("Wrong url: " + imageUrl);
                return;
            }

            String filename = getFileName(imageUrl);
            try (
                CloseableHttpResponse response = client.execute(request);
                FileOutputStream fos = new FileOutputStream(filename)
            ) {
                byte[] buffer = new byte[8096];
                InputStream ins = response.getEntity().getContent();
                int read;
                while (-1 != (read = ins.read(buffer))) {
                    fos.write(buffer, 0, read);
                }
            }
        } catch (IOException e) {
            System.err.println(e.getMessage());
            return;
        }
    }

    private static String getFileName(String url) {
        try {
            return Paths.get(new URI(url).getPath()).getFileName().toString();
        } catch (URISyntaxException e) {
            return null;
        }
    }

    private static CloseableHttpClient makeClient() {
        return HttpClientBuilder.create()
        .setDefaultRequestConfig(
            RequestConfig.custom()
                .setConnectTimeout(5000)
                .setSocketTimeout(30000)
                .setRedirectsEnabled(false)
                .build()
        )
        .build();
    }

    private static HttpGet makeGetRequest(String address) {
        return makeGetRequest(address, null);
    }

    private static HttpGet makeGetRequest(String address, Map<String, String> params) {
        try {
            URIBuilder builder = new URIBuilder(address);

            if (params != null) {
                for(Map.Entry<String, String> param: params.entrySet()) {
                    builder.addParameter(param.getKey(), param.getValue());
                }
            }

            return new HttpGet(builder.build());
        } catch (URISyntaxException e) {
            System.err.println(e.getMessage());
            return null;
        }
    }
}
